#!/usr/bin/python
#coding: utf-8


from scapy.all import *


usr = 'username'
pas = 'password'

def http_header(packet):
        http_packet=str(packet)
        if http_packet.find('GET'):
                return GET_print(packet)

def GET_print(packet1):
    if usr in str(packet1):
        ret = "***************************************GET PACKET****************************************************\n"
        ret += "\n".join(packet1.sprintf("{Raw:%Raw.load%}\n").split(r"\r\n"))
        ret += "*****************************************************************************************************\n"
        return ret

sniff(prn=http_header, filter="lambda x: x.haslayer(scapy_http.http.POSTRequest))")









"""
from scapy.all import *

stars = lambda n: "*" * n
def GET_print(packet):
    return "\n".join((
        stars(40) + "GET PACKET" + stars(40),
        "\n".join(packet.sprintf("{Raw:%Raw.load%}").split(r"\r\n")),
        stars(90)))

sniff(
    prn=GET_print,
    filter=" tcp port 80 http.request.method == \"POST\"")
print str(packet)






#!/usr/bin/python
#coding: utf-8

# Import des modules

from scapy.all import *

stars = lambda n: "*" * n

def GET_print(packet):
    return "\n".join((
        stars(40) + "GET PACKET" + stars(40),
        "\n".join(packet.sprintf("{Raw:%Raw.load%}").split(r"\r\n")),
        stars(90)))

sniff(
    prn=GET_print,
    filter="tcp port 80")
print(packet)

'''
from scapy.all import IP, sniff, http



def proess_tcp_packet(packet):
    
   # Processes a TCP packet, and if it contains an HTTP request, it prints it.
    
    if not packet.haslayer(http.HTTPRequest):
        # This packet doesn't contain an HTTP request so we skip it
        return
    http_layer = packet.getlayer(http.HTTPRequest)
    ip_layer = packet.getlayer(IP)
    print '\n{0[src]} just requested a {1[Method]} {1[Host]}{1[Path]}'.format(ip_layer.fields, http_layer.fields)

# Start sniffing the network.
sniff(filter='tcp port 80', prn=process_tcp_packet)
'''
"""
